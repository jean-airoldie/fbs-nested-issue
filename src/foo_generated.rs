// automatically generated by the FlatBuffers compiler, do not modify


pub mod foo {
  #![allow(dead_code)]
  #![allow(unused_imports)]

  use std::mem;
  use std::cmp::Ordering;

  extern crate flatbuffers;
  use self::flatbuffers::EndianScalar;

// struct Order, aligned to 8
#[repr(C, align(8))]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct Order {
  id_: i64,
} // pub struct Order
impl flatbuffers::SafeSliceAccess for Order {}
impl<'a> flatbuffers::Follow<'a> for Order {
  type Inner = &'a Order;
  #[inline]
  fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    <&'a Order>::follow(buf, loc)
  }
}
impl<'a> flatbuffers::Follow<'a> for &'a Order {
  type Inner = &'a Order;
  #[inline]
  fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    flatbuffers::follow_cast_ref::<Order>(buf, loc)
  }
}
impl<'b> flatbuffers::Push for Order {
    type Output = Order;
    #[inline]
    fn push(&self, dst: &mut [u8], _rest: &[u8]) {
        let src = unsafe {
            ::std::slice::from_raw_parts(self as *const Order as *const u8, Self::size())
        };
        dst.copy_from_slice(src);
    }
}
impl<'b> flatbuffers::Push for &'b Order {
    type Output = Order;

    #[inline]
    fn push(&self, dst: &mut [u8], _rest: &[u8]) {
        let src = unsafe {
            ::std::slice::from_raw_parts(*self as *const Order as *const u8, Self::size())
        };
        dst.copy_from_slice(src);
    }
}


impl Order {
  pub fn new<'a>(_id: i64) -> Self {
    Order {
      id_: _id.to_little_endian(),

    }
  }
  pub fn id<'a>(&'a self) -> i64 {
    self.id_.from_little_endian()
  }
}

pub enum NestedOrderOffset {}
#[derive(Copy, Clone, Debug, PartialEq)]

pub struct NestedOrder<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for NestedOrder<'a> {
    type Inner = NestedOrder<'a>;
    #[inline]
    fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
        Self {
            _tab: flatbuffers::Table { buf: buf, loc: loc },
        }
    }
}

impl<'a> NestedOrder<'a> {
    #[inline]
    pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
        NestedOrder {
            _tab: table,
        }
    }
    #[allow(unused_mut)]
    pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
        _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
        args: &'args NestedOrderArgs<'args>) -> flatbuffers::WIPOffset<NestedOrder<'bldr>> {
      let mut builder = NestedOrderBuilder::new(_fbb);
      if let Some(x) = args.buf { builder.add_buf(x); }
      builder.finish()
    }

    pub const VT_BUF: flatbuffers::VOffsetT = 4;

  #[inline]
  pub fn buf(&self) -> Option<&'a [u8]> {
    self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, u8>>>(NestedOrder::VT_BUF, None).map(|v| v.safe_slice())
  }
  pub fn buf_nested_flatbuffer(&'a self) ->  Option<NestedOrder<'a>> {
     match self.buf() {
         None => { None }
         Some(data) => {
             use self::flatbuffers::Follow;
             Some(<flatbuffers::ForwardsUOffset<NestedOrder<'a>>>::follow(data, 0))
         },
     }
  }
}

pub struct NestedOrderArgs<'a> {
    pub buf: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a ,  u8>>>,
}
impl<'a> Default for NestedOrderArgs<'a> {
    #[inline]
    fn default() -> Self {
        NestedOrderArgs {
            buf: None,
        }
    }
}
pub struct NestedOrderBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> NestedOrderBuilder<'a, 'b> {
  #[inline]
  pub fn add_buf(&mut self, buf: flatbuffers::WIPOffset<flatbuffers::Vector<'b , u8>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(NestedOrder::VT_BUF, buf);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> NestedOrderBuilder<'a, 'b> {
    let start = _fbb.start_table();
    NestedOrderBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<NestedOrder<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

}  // pub mod foo

